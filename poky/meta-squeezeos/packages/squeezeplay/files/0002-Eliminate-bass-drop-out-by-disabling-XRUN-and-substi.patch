From a5dba96fcffb6e792ac7536d028a7655b1dbabab Mon Sep 17 00:00:00 2001
From: Martin Williams <martinr.williams@gmail.com>
Date: Wed, 29 Jan 2020 00:45:37 +0000
Subject: [PATCH 2/3] Eliminate 'bass drop out' by disabling XRUN, and
 substituting silence

The 'bass drop out' effect is known to be triggered after recovering
from an XRUN condition[1].

By eliminating XRUNs, we prevent 'bass drop out'.

The quid quo pro is that, where an xrun would otherwise have occurred,
we will experience a small but noticeable glitch in the audio.

However it is not certain that occurrence of these xruns would actually
trigger drop out. I find, perhaps, 1 in 5, or 1 in 10.

Eliminating the possibility of xruns appears to cure the matter, but
will produce a small but noticeable glitch in the audio. So it becomes
a matter of user preference: Are a few unnecessary glitches a price
worth paying for eliminating 'bass drop out' ?

[1] For reasons unknown, we find that, after having apparently
successfully recovered from xrun (by executing 'snd_pcm_recover'), the
system occasionally switches the Left/Tweeter and Right/Woofer channels
around. This seems to happen well down the playback chain, perhaps at
the kernel driver/DMA level.

Sending Tweeter sound to the Woofer, and vice versa, accounts for the
observed 'bass drop out'. If listening through headphones, we hear that
the left and right channels are swapped.
---
 .../src/audio/decode/decode_alsa_backend.c    | 72 +++++++++++++++++++
 1 file changed, 72 insertions(+)

diff --git a/src/audio/decode/decode_alsa_backend.c b/src/audio/decode/decode_alsa_backend.c
index 365fdf4bf..127efda4e 100644
--- a/src/audio/decode/decode_alsa_backend.c
+++ b/src/audio/decode/decode_alsa_backend.c
@@ -552,6 +552,71 @@ static int pcm_close(struct decode_alsa *state, snd_pcm_t **pcmp, int mode) {
 }
 
 
+/* ### Baby bass drop-out ###
+
+* Sets up the pcm so that it does not stop due to an xrun condition,
+* but instead fills in with a few ms of silence.
+* By 'banishing' xruns, we eliminate the possibility that
+* 'bass drop out' will occur. This has only been observed after
+* an xrun.
+
+* In its place we will get a slight audio glitch whenever an xrun
+* would have been triggered. This may or may not be more irritating
+* than the 'bass drop out' it prevents.
+
+* A period of silence seems to sound marginally better than the
+* alternative of playing out earlier audio.
+*/
+
+static int _pcm_swparams(snd_pcm_t **pcmp)
+{
+	int err;
+	snd_pcm_sw_params_t *sw_params;
+	snd_pcm_uframes_t   boundary;
+
+	sw_params = (snd_pcm_sw_params_t *) alloca(snd_pcm_sw_params_sizeof());
+	memset(sw_params, 0, snd_pcm_sw_params_sizeof());
+	/* get the current swparams */
+	err = snd_pcm_sw_params_current(*pcmp, sw_params);
+	if (err < 0) {
+		LOG_ERROR("Unable to get current swparams for playback: %s", snd_strerror(err));
+		return err;
+	}
+	/* get the boundary value for audio buffer ring pointers */
+	err = snd_pcm_sw_params_get_boundary(sw_params, &boundary);
+	if (err < 0) {
+		LOG_ERROR("Unable to get boundary value: %s", snd_strerror(err));
+		return err;
+	}
+	/* set the stop threshold to the boundary value to eliminate xruns */
+	err = snd_pcm_sw_params_set_stop_threshold(*pcmp, sw_params, boundary);
+	if (err < 0) {
+		LOG_ERROR("Unable to set stop threshold: %s", snd_strerror(err));
+		return err;
+	}
+	/* set up silence */
+	/* threshold = 0 and size = boundary clears out earlier audio */
+	err = snd_pcm_sw_params_set_silence_threshold(*pcmp, sw_params, 0);
+	if (err < 0) {
+		LOG_ERROR("Unable to set silence threshold: %s", snd_strerror(err));
+		return err;
+	}
+	err = snd_pcm_sw_params_set_silence_size(*pcmp, sw_params, boundary);
+	if (err < 0) {
+		LOG_ERROR("Unable to set silence size: %s", snd_strerror(err));
+		return err;
+	}
+	/* set software parameters */
+	err = snd_pcm_sw_params(*pcmp, sw_params);
+	if (err < 0) {
+		LOG_ERROR("Unable to set sw params: %s", snd_strerror(err));
+		return err;
+	}
+
+	return 0;
+}
+
+
 static int _pcm_open(struct decode_alsa *state,
 		     snd_pcm_t **pcmp,
 		     int mode,
@@ -664,6 +729,13 @@ static int _pcm_open(struct decode_alsa *state,
 		goto skip_iec958;	  
 	}
 
+	/* ### Baby bass drop-out ### */
+	/* for playback device, we set software params too */
+	err = _pcm_swparams(pcmp);
+	if (err < 0) {
+		return err;
+	}
+
 	if ((err = snd_hctl_open(&state->hctl, state->playback_device, 0)) < 0) {
 		LOG_ERROR("snd_hctl_open failed: %s", snd_strerror(err));
 		goto skip_iec958;
-- 
2.26.2

