From 3e90f2eefd3f9f2c28f2991ad0c848214d487703 Mon Sep 17 00:00:00 2001
From: Martin Williams <martinr.williams@gmail.com>
Date: Mon, 5 Aug 2019 18:06:17 +0100
Subject: [PATCH 1/3] Initialize effects resampler while pcm closed

Set up the effects resampler while pcm channel is closed.
Prevents set up overhead (2/2.5ms 48kHz stream) contributing
towards Alsa XRUN errors during playback.
---
 .../src/audio/decode/audio_helper.c           | 30 +++++++++++++++++++
 .../src/audio/decode/decode_alsa_backend.c    |  8 +++++
 .../src/audio/decode/decode_priv.h            |  2 ++
 3 files changed, 40 insertions(+)

diff --git a/src/audio/decode/audio_helper.c b/src/audio/decode/audio_helper.c
index 10062ef06..a44e4b8e3 100644
--- a/src/audio/decode/audio_helper.c
+++ b/src/audio/decode/audio_helper.c
@@ -91,6 +91,36 @@ static inline s16_t s16_clip(s16_t a, s16_t b) {
 	static SpeexResamplerState *resampler;
 #endif
 
+/*
+ * ### Baby bass drop-out ###
+ * This function is called by '_pcm_open' while the alsa pcm channel is
+ * closed during changes in the stream sample rate. It moves the
+ * overhead of setting up the effects resampler away from the main part
+ * of the audio_thread_execute loop, thereby removing one potential
+ * source of Alsa XRUN errors. Observations suggest that set up of a
+ * 48kHz stream can take 2/2.5ms, which might be enough to trigger XRUN.
+ *
+ * It replicates the actions taken by 'get_effects_samples' below, which
+ * will then skip the action as it has already been done.
+ */
+void effects_resampler_init(unsigned int output_sample_rate) {
+#ifdef RESAMPLE_EFFECTS
+       if (output_sample_rate != EFFECTS_SAMPLE_RATE) {
+                int err;
+                if (!resampler) {
+                        resampler = jive_resampler_init(1, EFFECTS_SAMPLE_RATE, output_sample_rate, EFFECTS_RESAMPLE_QUALITY, &err);
+                } else {
+                        spx_uint32_t in_rate, out_rate;
+                        jive_resampler_get_rate(resampler, &in_rate, &out_rate);
+                        if (out_rate != output_sample_rate) {
+                                jive_resampler_reset_mem(resampler);
+                                jive_resampler_set_rate(resampler, EFFECTS_SAMPLE_RATE, output_sample_rate);
+                        }
+                }
+        }
+#endif
+}
+
 static int get_effects_samples(effect_t* output_samples_buf, size_t n_samples, unsigned int output_sample_rate) {
 		size_t samples_available, samples_until_wrap;
 
diff --git a/src/audio/decode/decode_alsa_backend.c b/src/audio/decode/decode_alsa_backend.c
index d8e7ba6e6..365fdf4bf 100644
--- a/src/audio/decode/decode_alsa_backend.c
+++ b/src/audio/decode/decode_alsa_backend.c
@@ -570,6 +570,14 @@ static int _pcm_open(struct decode_alsa *state,
 		pcm_close(state, pcmp, mode);
 	}
 
+	/* ### Baby bass drop-out ###
+	 * Set up the effects resampler while pcm channel is closed.
+	 * Prevents set up overhead (2/2.5ms 48kHz stream) contributing
+	 * towards Alsa XRUN errors during playback.
+	 */
+	if (state->flags & FLAG_STREAM_EFFECTS) {
+		effects_resampler_init(sample_rate);
+	}
 	/* Open pcm */
 	if ((err = snd_pcm_open(pcmp, device, mode, 0)) < 0) {
 		LOG_ERROR("Playback open error: %s", snd_strerror(err));
diff --git a/src/audio/decode/decode_priv.h b/src/audio/decode/decode_priv.h
index 411252359..002903701 100644
--- a/src/audio/decode/decode_priv.h
+++ b/src/audio/decode/decode_priv.h
@@ -191,6 +191,8 @@ extern void decode_output_end(void);
 extern void decode_output_flush(void);
 extern bool_t decode_check_start_point(void);
 extern void decode_mix_effects(void *outputBuffer, size_t framesPerBuffer, int sample_width, int output_sample_rate);
+/* ### Baby bass drop-out ### */
+extern void effects_resampler_init(unsigned int output_sample_rate);
 
 
 /* Sample playback api (sound effects) */
-- 
2.26.2

